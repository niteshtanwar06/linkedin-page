import type { Id, IPitcherClient } from "@codesandbox/pitcher-client";
import { Disposable } from "./utils/disposable";
export declare class Setup extends Disposable {
    private pitcherClient;
    private readonly onSetupProgressUpdateEmitter;
    /**
     * Emitted when the setup progress is updated.
     */
    readonly onSetupProgressUpdate: import("./utils/event").Event<SetupProgress>;
    constructor(pitcherClient: IPitcherClient);
    /**
     * Run the setup tasks, this will prepare the docker image, and run the user defined
     * setup steps. This will automatically run when a sandbox is started.
     */
    run(): Promise<SetupProgress>;
    /**
     * Returns the current progress of the setup tasks.
     */
    getProgress(): Promise<SetupProgress>;
    waitForFinish(): Promise<SetupProgress>;
}
export type SetupProgress = {
    state: "IDLE" | "IN_PROGRESS" | "FINISHED" | "STOPPED";
    steps: Step[];
    currentStepIndex: number;
};
export type SetupShellStatus = "SUCCEEDED" | "FAILED" | "SKIPPED";
export type Step = {
    name: string;
    command: string;
    shellId: Id | null;
    finishStatus: SetupShellStatus | null;
};
