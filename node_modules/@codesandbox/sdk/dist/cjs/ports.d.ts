import type { IPitcherClient } from "@codesandbox/pitcher-client";
import { Disposable } from "./utils/disposable";
export declare class PortInfo {
    port: number;
    hostname: string;
    constructor(port: number, hostname: string);
    getPreviewUrl(protocol?: string): string;
}
export declare class Ports extends Disposable {
    private pitcherClient;
    private onDidPortOpenEmitter;
    get onDidPortOpen(): import("./utils/event").Event<PortInfo>;
    private onDidPortCloseEmitter;
    get onDidPortClose(): import("./utils/event").Event<number>;
    private lastOpenedPorts;
    constructor(pitcherClient: IPitcherClient);
    getOpenedPort(port: number): PortInfo | undefined;
    getOpenedPorts(): PortInfo[];
    getPreviewUrl(port: number, protocol?: string): string | undefined;
    /**
     * Wait for a port to be opened.
     *
     * @param port - The port to wait for.
     * @returns A promise that resolves when the port is opened.
     */
    waitForPort(port: number): Promise<PortInfo>;
}
