import type { IPitcherClient } from "@codesandbox/pitcher-client";
import { PortInfo } from "./ports";
import { Disposable } from "./utils/disposable";
export type TaskDefinition = {
    name: string;
    command: string;
    runAtStart?: boolean;
    preview?: {
        port?: number;
        "pr-link"?: "direct" | "redirect" | "devtool";
    };
};
export type Task = TaskDefinition & {
    id: string;
    unconfigured?: boolean;
    shellId: null | string;
    ports: PortInfo[];
};
export declare class Tasks extends Disposable {
    private pitcherClient;
    constructor(pitcherClient: IPitcherClient);
    /**
     * Gets all tasks that are available in the current sandbox.
     */
    getTasks(): Promise<Task[]>;
    /**
     * Gets a task by its ID.
     */
    getTask(taskId: string): Promise<Task | undefined>;
    /**
     * Runs a task by its ID.
     */
    runTask(taskId: string): Promise<Task>;
}
